# -*- Mode:Org; Coding:utf-8; fill-column:158 -*-
# ######################################################################################################################################################.H.S.##
# FILE:        QuickStart.org
#+TITLE:       MRPTree Quick Start
#+AUTHOR:      Mitch Richling
#+EMAIL:       http://www.mitchr.me/
#+DATE:        2024-08-20
#+DESCRIPTION: Minimal tutorial for getting started with MRPTree
#+KEYWORDS:    KEYWORDS FIXME
#+LANGUAGE:    en
#+OPTIONS:     num:t toc:nil \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:t skip:nil d:nil todo:t pri:nil H:5 p:t author:t html-scripts:nil 
#+SEQ_TODO:    TODO:NEW(t)                         TODO:WORK(w)    TODO:HOLD(h)    | TODO:FUTURE(f)   TODO:DONE(d)    TODO:CANCELED(c)
#+PROPERTY: header-args :eval never-export
#+HTML_HEAD: <style>body { width: 95%; margin: 2% auto; font-size: 18px; line-height: 1.4em; font-family: Georgia, serif; color: black; background-color: white; }</style>
#+HTML_HEAD: <style>body { min-width: 500px; max-width: 1024px; }</style>
#+HTML_HEAD: <style>h1,h2,h3,h4,h5,h6 { color: #A5573E; line-height: 1em; font-family: Helvetica, sans-serif; }</style>
#+HTML_HEAD: <style>h1,h2,h3 { line-height: 1.4em; }</style>
#+HTML_HEAD: <style>h1.title { font-size: 3em; }</style>
#+HTML_HEAD: <style>.subtitle { font-size: 0.6em; }</style>
#+HTML_HEAD: <style>h4,h5,h6 { font-size: 1em; }</style>
#+HTML_HEAD: <style>.org-src-container { border: 1px solid #ccc; box-shadow: 3px 3px 3px #eee; font-family: Lucida Console, monospace; font-size: 80%; margin: 0px; padding: 0px 0px; position: relative; }</style>
#+HTML_HEAD: <style>.org-src-container>pre { line-height: 1.2em; padding-top: 1.5em; margin: 0.5em; background-color: #404040; color: white; overflow: auto; }</style>
#+HTML_HEAD: <style>.org-src-container>pre:before { display: block; position: absolute; background-color: #b3b3b3; top: 0; right: 0; padding: 0 0.2em 0 0.4em; border-bottom-left-radius: 8px; border: 0; color: white; font-size: 100%; font-family: Helvetica, sans-serif;}</style>
#+HTML_HEAD: <style>pre.example { white-space: pre-wrap; white-space: -moz-pre-wrap; white-space: -o-pre-wrap; font-family: Lucida Console, monospace; font-size: 80%; background: #404040; color: white; display: block; padding: 0em; border: 2px solid black; }</style>
#+HTML_LINK_HOME: https://www.mitchr.me/
#+HTML_LINK_UP: https://github.com/richmit/MRPTree/
# ######################################################################################################################################################.H.E.##

#+ATTR_HTML: :border 2 solid #ccc :frame hsides :align center
| Copyright \copy {{{time(%Y)}}} Mitch Richling. All rights reserved. |

#+TOC: headlines 5

* Playing With *=MRPtree=*'s Example Programs
:PROPERTIES:
:CUSTOM_ID: examples
:END:

I suggest starting iwth the example programs.

The first step is to download *=MRPtree=*.  Simply clone the repository with GIT like this:

#+BEGIN_EXAMPLE
git clone 'https://github.com/richmit/MRPTree.git'
#+END_EXAMPLE

This next step is optional, but some of the examples won't build without *=MRaster=*.  You can clone *=MRaster=* in the same directory you cloned *=MRPtree=*
or you can do it at the top level of the *=MRPtree=* repository.  Whatever directory you chose, the clone command will look something like this:

#+BEGIN_EXAMPLE
git clone 'https://github.com/richmit/mraster.git'
#+END_EXAMPLE

Note that *=MRaster=* can make use of several optional development packages; hoewver, none of them are needed for the functionaly used by the *=MRPtree=*
examples.

The source code for the example programs is located in the "=examples=" directory in the *=MRPtree=* repository -- note the *=MRaster=* repository also has an
"=examples=", but that's not the one you want.  *=MRPtree=* ships with a =cmake= build system that should be able to interrogate your environment, and produce
make files for your OS.  To build the example programs:

   1) Change directory to the root of the git *=MRPtree=* repository (you should see "=lib=" & "=examples=" directories).
   2) Create a "=build=" directory -- cmake builds outside of the source trees.
   3) Change directory to the build directory
   4) Use =cmake= to generate make files for your system
   5) Build the examples
   6) Play with the examples

A typical shell session following the steps outlined above might look like this:

#+begin_src sh :exports code :eval never
git clone 'https://github.com/richmit/MRPTree.git'
git clone 'https://github.com/richmit/mraster.git'
cd MRPTree
rm -rf build
mkdir build
cd build
cmake -G 'MSYS Makefiles' ..    # For Windows running MSYS2.  Remove the "-G 'MSYS Makefiles'" bit for other platforms.
make
#+end_src

Note =cmake= can take several options like the "=-G=" option mentioned in the example above.  For more information on options related to *=MRPtree=*, take a look
at the "=configure.sh=" script in the root directory of the git repository.  Here is the 'help' printed from that script:

#+begin_src sh :results output verbatum :exports both 
../configure.sh -h
#+end_src

#+RESULTS:
#+begin_example

  Run this script from the 'build' directory.

  If you don't have a 'build' directory yet, then create one!

  Use: configure.sh [cmake arguments]

    Common Arguments:
     ,* Target -- leave it off to get the default
       - -G 'MSYS Makefiles'           <-- Default on MSYS2
       - -G 'Visual Studio 17 2022'
       - -G 'Unix Makefiles'           <-- Default on Linux ('Linux' means 'Not MSYS2')
       - -G Ninja
     ,* Compiler -- leave it off to get the default
       - -DCMAKE_CXX_COMPILER=clang++
       - -DCMAKE_CXX_COMPILER=g++      <-- Default for 'MSYS Makefiles'
       - -DCMAKE_CXX_COMPILER=g++-##   <-- Default for 'Unix Makefiles' if /usr/bin/g++-[0-9][0-9] exists
                                           in which case the highest numbered version is selcted.
                                           This code base needs at least GCC-14.
       - -DCMAKE_CXX_COMPILER=g++      <-- Default for 'Unix Makefiles' if /usr/bin/g++-[0-9][0-9] missing
       -                               <-- Default for 'Visual Studio 17 2022'
     ,* Optional features -- leave them off to enable everything
       - -DO_DOXYGEN=[YES|NO]  -- Doxygen (to build documentation)
       - -DO_BTEST=[YES|NO]    -- BOOT unit tests (to run unit tests)
       - -DO_MRASTER=[YES|NO]  -- MRaster (used for some examples)
#+end_example

* Quick Start (The absolute minimum for people who hate cmake)
:PROPERTIES:
:CUSTOM_ID: qs-min
:END:

If you are interested playing around with *=MRPtree=* as quickly as possible, then this section is for you.

The first step is to download *=MRPtree=*.  Simply clone the repository with GIT like this:

#+BEGIN_EXAMPLE
git clone 'https://github.com/richmit/MRPTree.git'
#+END_EXAMPLE

Once you have it downloaded, make note of the "=lib=" folder within the repository.  This folder contains everything you need to develop with *=MRPtree=*, and you
can simply put your code right in that directory.  So let's create a file called "=hello_world.cpp=" right inside the "=lib=" directory with the following content:

#+begin_src sh :results output verbatum :exports results :wrap "src c++ :eval never :tangle no"
grep -EA 10000 '(!|#|\*|=|_|-|%|;|C|/){70,}\.H\.E\.' ../examples/hello_world.cpp | grep -vE '(!|#|\*|=|_|-|%|;|C|/){70,}' | grep -vE '@(cond|endcond)'
#+end_src

#+RESULTS:
#+begin_src c++ :eval never :tangle no

#include "MR_rect_tree.hpp"
#include "MR_cell_cplx.hpp"
#include "MR_rt_to_cc.hpp"

typedef mjr::tree15b2d1rT            tt_t;
typedef mjr::MRccT5                  cc_t;
typedef mjr::MR_rt_to_cc<tt_t, cc_t> tc_t;

tt_t::rrpt_t damp_cos_wave(tt_t::drpt_t xvec) {
  double x = xvec[0];
  double y = xvec[1];
  double d = x*x+y*y;
  double z = std::exp(-d/4)*std::cos(4*std::sqrt(d));
  return z;
}

int main() {
  tt_t tree({-2.1, -2.1},
            { 2.1,  2.1});
  cc_t ccplx;

  tree.refine_grid(7, damp_cos_wave);
  tree.dump_tree(5);

  tc_t::construct_geometry_fans(ccplx,
                                tree,
                                2,
                                {{tc_t::val_src_spc_t::FDOMAIN, 0},
                                 {tc_t::val_src_spc_t::FDOMAIN, 1},
                                 {tc_t::val_src_spc_t::FRANGE,  0}});
  ccplx.create_named_datasets({"x", "y", "f(x,y)"});

  ccplx.write_xml_vtk("hello_world.vtu", "hello_world");
}
#+end_src

Now we can compile it with GCC like this:

#+begin_src sh :exports source :eval never
g++ -m64 -std=gnu++23 hello_world.cpp -o hello_world
#+end_src

Now you can run it, and then load the file it created ("=hello_world.vtu=") up in something like Paraview.


