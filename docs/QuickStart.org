# -*- Mode:Org; Coding:utf-8; fill-column:158 -*-
# ######################################################################################################################################################.H.S.##
# FILE:        QuickStart.org
#+TITLE:       FuncViz Quick Start
#+AUTHOR:      Mitch Richling
#+EMAIL:       http://www.mitchr.me/
#+DATE:        2024-08-20
#+DESCRIPTION: Minimal tutorial for getting started with MRPTree
#+KEYWORDS:    KEYWORDS FIXME
#+LANGUAGE:    en
#+OPTIONS:     num:t toc:nil \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:t skip:nil d:nil todo:t pri:nil H:5 p:t author:t html-scripts:nil
#+SEQ_TODO:    TODO:NEW(t)                         TODO:WORK(w)    TODO:HOLD(h)    | TODO:FUTURE(f)   TODO:DONE(d)    TODO:CANCELED(c)
#+PROPERTY: header-args :eval never-export
#+HTML_HEAD: <style>body { width: 95%; margin: 2% auto; font-size: 18px; line-height: 1.4em; font-family: Georgia, serif; color: black; background-color: white; }</style>
#+HTML_HEAD: <style>body { min-width: 500px; max-width: 1024px; }</style>
#+HTML_HEAD: <style>h1,h2,h3,h4,h5,h6 { color: #A5573E; line-height: 1em; font-family: Helvetica, sans-serif; }</style>
#+HTML_HEAD: <style>h1,h2,h3 { line-height: 1.4em; }</style>
#+HTML_HEAD: <style>h1.title { font-size: 3em; }</style>
#+HTML_HEAD: <style>.subtitle { font-size: 0.6em; }</style>
#+HTML_HEAD: <style>h4,h5,h6 { font-size: 1em; }</style>
#+HTML_HEAD: <style>.org-src-container { border: 1px solid #ccc; box-shadow: 3px 3px 3px #eee; font-family: Lucida Console, monospace; font-size: 80%; margin: 0px; padding: 0px 0px; position: relative; }</style>
#+HTML_HEAD: <style>.org-src-container>pre { line-height: 1.2em; padding-top: 1.5em; margin: 0.5em; background-color: #404040; color: white; overflow: auto; }</style>
#+HTML_HEAD: <style>.org-src-container>pre:before { display: block; position: absolute; background-color: #b3b3b3; top: 0; right: 0; padding: 0 0.2em 0 0.4em; border-bottom-left-radius: 8px; border: 0; color: white; font-size: 100%; font-family: Helvetica, sans-serif;}</style>
#+HTML_HEAD: <style>pre.example { white-space: pre-wrap; white-space: -moz-pre-wrap; white-space: -o-pre-wrap; font-family: Lucida Console, monospace; font-size: 80%; background: #404040; color: white; display: block; padding: 0em; border: 2px solid black; }</style>
#+HTML_LINK_HOME: https://www.mitchr.me/
#+HTML_LINK_UP: https://github.com/richmit/MRPTree/
# ######################################################################################################################################################.H.E.##

#+ATTR_HTML: :border 2 solid #ccc :frame hsides :align center
| Copyright \copy {{{time(%Y)}}} Mitch Richling. All rights reserved. |

#+TOC: headlines 5


* Playing With The Example Programs
:PROPERTIES:
:CUSTOM_ID: examples
:END:

This repository depends upon a couple others.  I suggest making one direcotyr, and cloneing all three into that directory.

A typical shell session following the steps outlined above might look like this:

#+begin_src sh :exports code :eval never
mkdir working                                        # Create a working directory (name it whatever you want)
cd working                                           # Change into the working directory
git clone 'https://github.com/richmit/FuncViz.git'   # Clone the FuncViz repository
git clone 'https://github.com/richmit/MRPTree.git'   # Clone the MRPTree repository
git clone 'https://github.com/richmit/mraster.git'   # Clone the MRaster repository
cd FuncViz                                           # Change directory to the root of the git FuncViz repository
rm -rf build                                         # Just in case a build directory exists, get rid of it!
mkdir build                                          # Create a build directory
cd build                                             # Change directory to the build directory
cmake -G 'MSYS Makefiles' ..                         # Generate build files
cmake --build . -t examples                          # Build the examples
#+end_src

Note the "=cmake -G=" command given above is specific to Windows.  For UNIX/Linux replace "=MSYS Makefiles=" with "=Unix Makefiles=".

Alternately you can run the "=configure.sh=" script in the root directory of the git repository.  Here is the 'help' printed from that script:

#+begin_src sh :results output verbatum :exports both
../configure.sh -h
#+end_src

#+RESULTS:
#+begin_example

  Run this script from the 'build' directory.

  If you don't have a 'build' directory yet, then create one!

  Use: configure.sh [configure options] [cmake arguments]

    Configure Options
     - -C Clean the build directory before running cmake (asks for conformation)
     - -F Clean the build directory before running cmake (no conformation)

    Common Cmake Arguments:
     - Target -- leave it off to get the default
       - -G 'MSYS Makefiles'           <-- Default on MSYS2
       - -G 'Visual Studio 17 2022'
       - -G 'Unix Makefiles'           <-- Default on Linux ('Linux' means 'Not MSYS2')
       - -G Ninja
     - Compiler -- leave it off to get the default
       - -DCMAKE_CXX_COMPILER=clang++
       - -DCMAKE_CXX_COMPILER=g++      <-- Default for 'MSYS Makefiles'
       - -DCMAKE_CXX_COMPILER=g++-##   <-- Default for 'Unix Makefiles' if /usr/bin/g++-[0-9][0-9] exists
                                           in which case the highest numbered version is selected.
                                           This code base needs at least GCC-14.
       - -DCMAKE_CXX_COMPILER=g++      <-- Default for 'Unix Makefiles' if /usr/bin/g++-[0-9][0-9] missing
       -                               <-- Default for 'Visual Studio 17 2022'
     - Optional features -- leave them off to enable everything
       - -DO_DOXYGEN=[YES|NO]  -- Doxygen (to build documentation)
       - -DO_BTEST=[YES|NO]    -- BOOT unit tests (to run unit tests)
       - -DO_MRASTER=[YES|NO]  -- MRaster (Raster graphics used by some examples)
       - -DMRaster_DIR=<PATH>  -- Search path for MRaster package file
                                   The following automatically added to the search paths:
                                     - ./mraster/build/install/share/MRaster/
                                     - ./mraster/build/
                                     - ../mraster/build/install/share/MRaster/
                                     - ../mraster/build/
       - -DO_MRPTREE=[YES|NO]  -- MRPTree (Sample tree used by most examples)
       - -DMRPTree_DIR=<PATH>  -- Search path for MRaster package file
                                   The following automatically added to the search paths:
                                     - ./MRPTree/build/install/share/MRPTree/
                                     - ./MRPTree/build/
                                     - ../MRPTree/build/install/share/MRPTree/
                                     - ../MRPTree/build/
#+end_example

** Accessing *=MRPtree=* & *=MRaster=* features

These packages can be found & used in various different ways:

 - Simply clone the repo as described above and CMake will find headers. Note that advanced TIFF support will unavailable in this configuration.
 - Do the previous and also configure each repo -- i.e. run =cmake= or the =configure.sh= script in each repo.  This will provide full functionality and load cmake packages from =<REPO>/build/=).
 - Do the previous and also install without a custom install prefix. This will provide full functionality and load cmake packages from =<REPO>/build/install/lib/cmake/=).
 - Do the previous but with a custom install prefix.
   - If the custom install prefix is known by cmake, then cmake will find the packages and use them.
   - Otherwise you need to tell cmake where to find the package install (for example, by setting the =MRaster_DIR= & =MRPTree_DIR= variables in the =CMakeLists.txt= file)
